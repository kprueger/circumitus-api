package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"

	"github.com/kprueger/circumitus-api/graph/generated"
	"github.com/kprueger/circumitus-api/graph/model"
	"github.com/kprueger/circumitus-api/internal/db"
)

// CreateChip is the resolver for the createChip field.
func (r *mutationResolver) CreateChip(ctx context.Context, id string, password string) (*model.Chip, error) {
	var chip model.Chip
	err := db.Pool.QueryRow(ctx, "INSERT INTO chip (id) VALUES ($1) RETURNING id", id).Scan(&chip.ID)
	if err != nil {
		return nil, err
	}
	return &chip, nil
}

// UpdateChip is the resolver for the updateChip field.
func (r *mutationResolver) UpdateChip(ctx context.Context, id string, password string) (*model.Chip, error) {
	panic(fmt.Errorf("not implemented: UpdateChip - updateChip"))
}

// DeleteChip is the resolver for the deleteChip field.
func (r *mutationResolver) DeleteChip(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteChip - deleteChip"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, username string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, name *string, email *string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// CreateContainer is the resolver for the createContainer field.
func (r *mutationResolver) CreateContainer(ctx context.Context, street string, cTypeID string) (*model.Container, error) {
	panic(fmt.Errorf("not implemented: CreateContainer - createContainer"))
}

// UpdateContainer is the resolver for the updateContainer field.
func (r *mutationResolver) UpdateContainer(ctx context.Context, id string, status *string, street *string) (*model.Container, error) {
	panic(fmt.Errorf("not implemented: UpdateContainer - updateContainer"))
}

// DeleteContainer is the resolver for the deleteContainer field.
func (r *mutationResolver) DeleteContainer(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteContainer - deleteContainer"))
}

// CreateHistory is the resolver for the createHistory field.
func (r *mutationResolver) CreateHistory(ctx context.Context, containerID string, chipID string, day string, date string, time string, used string) (*model.History, error) {
	panic(fmt.Errorf("not implemented: CreateHistory - createHistory"))
}

// DeleteHistory is the resolver for the deleteHistory field.
func (r *mutationResolver) DeleteHistory(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteHistory - deleteHistory"))
}

// CreateCapacity is the resolver for the createCapacity field.
func (r *mutationResolver) CreateCapacity(ctx context.Context, capacity int) (*model.Capacity, error) {
	panic(fmt.Errorf("not implemented: CreateCapacity - createCapacity"))
}

// UpdateCapacity is the resolver for the updateCapacity field.
func (r *mutationResolver) UpdateCapacity(ctx context.Context, id string, capacity int) (*model.Capacity, error) {
	panic(fmt.Errorf("not implemented: UpdateCapacity - updateCapacity"))
}

// DeleteCapacity is the resolver for the deleteCapacity field.
func (r *mutationResolver) DeleteCapacity(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCapacity - deleteCapacity"))
}

// CreatePosition is the resolver for the createPosition field.
func (r *mutationResolver) CreatePosition(ctx context.Context, latitude float64, longitude float64) (*model.Position, error) {
	panic(fmt.Errorf("not implemented: CreatePosition - createPosition"))
}

// UpdatePosition is the resolver for the updatePosition field.
func (r *mutationResolver) UpdatePosition(ctx context.Context, id string, latitude *float64, longitude *float64) (*model.Position, error) {
	panic(fmt.Errorf("not implemented: UpdatePosition - updatePosition"))
}

// DeletePosition is the resolver for the deletePosition field.
func (r *mutationResolver) DeletePosition(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeletePosition - deletePosition"))
}

// CreateCType is the resolver for the createCType field.
func (r *mutationResolver) CreateCType(ctx context.Context, name string) (*model.CType, error) {
	panic(fmt.Errorf("not implemented: CreateCType - createCType"))
}

// UpdateCType is the resolver for the updateCType field.
func (r *mutationResolver) UpdateCType(ctx context.Context, id string, name string) (*model.CType, error) {
	panic(fmt.Errorf("not implemented: UpdateCType - updateCType"))
}

// DeleteCType is the resolver for the deleteCType field.
func (r *mutationResolver) DeleteCType(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCType - deleteCType"))
}

// Chip is the resolver for the chip field.
func (r *queryResolver) Chip(ctx context.Context, id string) (*model.Chip, error) {
	panic(fmt.Errorf("not implemented: Chip - chip"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Container is the resolver for the container field.
func (r *queryResolver) Container(ctx context.Context, id string) (*model.Container, error) {
	panic(fmt.Errorf("not implemented: Container - container"))
}

// HistoryByContainerID is the resolver for the historyByContainerID field.
func (r *queryResolver) HistoryByContainerID(ctx context.Context, containerID string) (*model.History, error) {
	panic(fmt.Errorf("not implemented: HistoryByContainerID - historyByContainerID"))
}

// HistoryByChipID is the resolver for the historyByChipID field.
func (r *queryResolver) HistoryByChipID(ctx context.Context, chipID string) ([]*model.History, error) {
	panic(fmt.Errorf("not implemented: HistoryByChipID - historyByChipID"))
}

// HistoryByChipIDByPeriod is the resolver for the historyByChipIDByPeriod field.
func (r *queryResolver) HistoryByChipIDByPeriod(ctx context.Context, chipID string, startDate string, endDate string) ([]*model.History, error) {
	panic(fmt.Errorf("not implemented: HistoryByChipIDByPeriod - historyByChipIDByPeriod"))
}

// HistoryByChipIDByContainerID is the resolver for the historyByChipIDByContainerID field.
func (r *queryResolver) HistoryByChipIDByContainerID(ctx context.Context, chipID string, containerID string) ([]*model.History, error) {
	panic(fmt.Errorf("not implemented: HistoryByChipIDByContainerID - historyByChipIDByContainerID"))
}

// HitoryByChipIDByContainerIDByPeriod is the resolver for the hitoryByChipIDByContainerIDByPeriod field.
func (r *queryResolver) HitoryByChipIDByContainerIDByPeriod(ctx context.Context, chipID string, containerID string, startDate string, endDate string) ([]*model.History, error) {
	panic(fmt.Errorf("not implemented: HitoryByChipIDByContainerIDByPeriod - hitoryByChipIDByContainerIDByPeriod"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
